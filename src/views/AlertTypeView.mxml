<?xml version="1.0" encoding="utf-8"?>
<!--
Copyright (C) 2017  Johan Degraeve

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/gpl.txt>.

-->
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		creationComplete="view1_creationCompleteHandler(event)"
		xmlns:s="library://ns.adobe.com/flex/spark" title="">
	
	<fx:Metadata> 
		[ResourceBundle("alerttypeview")] 
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import com.distriqt.extension.dialog.Dialog;
			import com.distriqt.extension.dialog.DialogView;
			import com.distriqt.extension.dialog.PickerDialogView;
			import com.distriqt.extension.dialog.builders.AlertBuilder;
			import com.distriqt.extension.dialog.builders.PickerDialogBuilder;
			import com.distriqt.extension.dialog.events.DialogViewEvent;
			import com.distriqt.extension.dialog.objects.DialogAction;
			import com.freshplanet.ane.AirBackgroundFetch.BackgroundFetch;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import mx.utils.StringUtil;
			
			import Utilities.FromtimeAndValueArrayCollection;
			
			import databaseclasses.AlertType;
			import databaseclasses.CommonSettings;
			import databaseclasses.Database;
			
			import model.ModelLocator;
			
			import services.DialogService;
			
			[Bindable]
			private var back_label:String;
			private var alertType:AlertType;
			private var alarmEnabled:Boolean;
			[Bindable]
			private var alarmName:String;
			[Bindable]
			private var soundName:String;
			private var vibrationenabled:Boolean;
			private var snoozefromnotification:Boolean;
			[Bindable]
			private var defaultSnoozePeriodInMinutes:int;
			[Bindable]
			private var repeatInMinutes:int;
			[Bindable]
			private var topText:String="";
			
			private var resetColorTimer:Timer;
			private var alertTypeChanged:Boolean;
			private var selectedIndex:int;
			private var previousAlertTypeName:String = "";
			
			/**
			 * this is the default value for 5 minutes, to be used as repeat interval<br>
			 * the real value is a bit less than 5 minutes because if we would take 5 minutes then there's a risk that the check is done just a bit too soon 
			 */
			private const fiveMinutesInMs:int = 5 * 60 * 1000 - 10000;
			
			protected function view1_creationCompleteHandler(event:FlexEvent):void
			{
				//ModelLocator.navigator = navigator;
				back_label = ModelLocator.resourceManagerInstance.getString('general','back');
				topText = ModelLocator.resourceManagerInstance.getString('alerttypeview','edit_alert_type');
				alertType = data.alertType;
				selectedIndex = data.selectedIndex;
				alarmEnabled = alertType.enabled;
				labelenabledornot.text = alarmEnabled ? ModelLocator.resourceManagerInstance.getString('alerttypeview','enabled'):ModelLocator.resourceManagerInstance.getString('alerttypeview','disabled');
				alertTypeChanged = false;
				
				alarmName = alertType.alarmName;
				if (alarmEnabled) {
					alarmnamegroup.alpha = 1;
				} else {
					alarmnamegroup.alpha = 0.25;
				}
				
				soundName = alertType.sound;
				if (soundName == "no_sound")
					soundName = ModelLocator.resourceManagerInstance.getString("alerttypeview","no_sound");
				if (soundName == "default") {//for backward compatibility, default sound is removed as of 2.2.5
					soundName = ModelLocator.resourceManagerInstance.getString("alerttypeview","default_sound_as_displayed");
				}
				if (alarmEnabled) {
					soundgroup.alpha = 1;
				} else {
					soundgroup.alpha = 0.25;
				}
				
				vibrationenabled = alertType.enableVibration;
				if (alarmEnabled) {
					enablevibrationgroup.alpha = 1;
				} else {
					enablevibrationgroup.alpha = 0.25;
				}
				labelvibrationenabled.text = vibrationenabled ? ModelLocator.resourceManagerInstance.getString('general','yes') : ModelLocator.resourceManagerInstance.getString('general','no');
				
				snoozefromnotification = alertType.snoozeFromNotification;
				if (alarmEnabled) {
					snoozefromnotificationgroup.alpha = 1;
				} else {
					snoozefromnotificationgroup.alpha = 0.25;
				}
				labelsnoozefromnotification.text = snoozefromnotification ? ModelLocator.resourceManagerInstance.getString('general','yes') : ModelLocator.resourceManagerInstance.getString('general','no');
				
				defaultSnoozePeriodInMinutes = alertType.defaultSnoozePeriodInMinutes;
				if (alarmEnabled) {
					defaultsnoozeperiodgroup.alpha = 1;
				} else {
					defaultsnoozeperiodgroup.alpha = 0.25;
				}
				
				repeatInMinutes = alertType.repeatInMinutes;
				if (alarmEnabled) {
					repeatinminutesgroup.alpha = 1;
				} else {
					repeatinminutesgroup.alpha = 0.25;
				}
				labelrepeatinminutes.text = (repeatInMinutes == fiveMinutesInMs ? ModelLocator.resourceManagerInstance.getString('general','yes') : ModelLocator.resourceManagerInstance.getString('general','no'));
			}
			
			protected function enabled_clickHandler(event:MouseEvent):void {
				rect01.color = uint("0xD3D3D3");
				rect02.color = uint("0xD3D3D3");
				setResetColorTimer();
				if (alarmEnabled) {
					alarmEnabled = false;
					alarmnamegroup.alpha = 0.25;
					enablevibrationgroup.alpha = 0.25;
					snoozefromnotificationgroup.alpha = 0.25;
					defaultsnoozeperiodgroup.alpha = 0.25;
					soundgroup.alpha = 0.25;
					repeatinminutesgroup.alpha = 0.25;
				} else {
					alarmEnabled = true;
					alarmnamegroup.alpha = 1;
					enablevibrationgroup.alpha = 1;
					snoozefromnotificationgroup.alpha = 1;
					defaultsnoozeperiodgroup.alpha = 1;
					soundgroup.alpha = 1;
					repeatinminutesgroup.alpha = 1;
				}
				alertTypeChanged = true;
				labelenabledornot.text = alarmEnabled ? ModelLocator.resourceManagerInstance.getString('alerttypeview','enabled'):ModelLocator.resourceManagerInstance.getString('alerttypeview','disabled');
			}
			
			protected function alarmName_clickHandler(event:MouseEvent):void {
				if (!alarmEnabled)
					return;
				rect03.color = uint("0xD3D3D3");
				rect04.color = uint("0xD3D3D3");
				setResetColorTimer();
				var alert:DialogView = Dialog.service.create(
					new AlertBuilder()
					.setTitle(ModelLocator.resourceManagerInstance.getString("alerttypeview","alarm_name"))
					.setMessage(ModelLocator.resourceManagerInstance.getString("alerttypeview","enter_alarm_name"))
					.addTextField(alarmName,"")
					.addOption("Ok", DialogAction.STYLE_POSITIVE, 0)
					.addOption(ModelLocator.resourceManagerInstance.getString("general","cancel"), DialogAction.STYLE_CANCEL, 1)
					.build()
				);
				DialogService.addDialog(alert);
				alert.addEventListener(DialogViewEvent.CLOSED, alarmnameentered);
				
				function alarmnameentered(event:DialogViewEvent):void {
					if (event.index == 1) {
						return;
					}
					if (event.values.length < 1)
						return;
					
					if (((event.values[0] as String).toUpperCase() == alarmName.toUpperCase()) ||
						((event.values[0] as String).toUpperCase() == alertType.alarmName.toUpperCase())) {
						
					} else {
						var listOfAlarmname:ArrayCollection = Database.getAllAlertTypes();
						for (var i:int = 0;i < listOfAlarmname.length;i++) {
							if ((event.values[0] as String).toUpperCase() == (listOfAlarmname.getItemAt(i) as AlertType).alarmName.toUpperCase()) {
								DialogService.openSimpleDialog(ModelLocator.resourceManagerInstance.getString("alerttypeview","alarm_name_invalid"),
									ModelLocator.resourceManagerInstance.getString("alerttypeview","alarm_name_already_exists"));
								return;
							}
						}
					}
					
					if ((event.values[0] as String).indexOf("-") > -1) {
						DialogService.openSimpleDialog(ModelLocator.resourceManagerInstance.getString("alerttypeview","alarm_name_invalid"),
							ModelLocator.resourceManagerInstance.getString("alerttypeview","alarm_name_should_not_have_dash"));
						return;
					}
					
					if (alarmName != (event.values[0] as String)) {
						alertTypeChanged = true;
						previousAlertTypeName = alarmName;
						alarmName = event.values[0] as String;
					}
				}
			}
			
			protected function enablevibration_clickHandler(event:MouseEvent):void {
				if (!alarmEnabled)
					return;
				rect05.color = uint("0xD3D3D3");
				rect06.color = uint("0xD3D3D3");
				setResetColorTimer();
				vibrationenabled = !vibrationenabled;
				labelvibrationenabled.text = vibrationenabled ? ModelLocator.resourceManagerInstance.getString('general','yes') : ModelLocator.resourceManagerInstance.getString('general','no');
				alertTypeChanged = true;
			}
			
			protected function repeatinminutes_clickHandler(event:MouseEvent):void {
				if (!alarmEnabled)
					return;
				rect13.color = uint("0xD3D3D3");
				rect14.color = uint("0xD3D3D3");
				setResetColorTimer();
				repeatInMinutes = (repeatInMinutes == fiveMinutesInMs ? 0:fiveMinutesInMs);
				labelrepeatinminutes.text = (repeatInMinutes == fiveMinutesInMs ? ModelLocator.resourceManagerInstance.getString('general','yes') : ModelLocator.resourceManagerInstance.getString('general','no'));
				alertTypeChanged = true;
			}
			
			protected function snoozefromnotification_clickHandler(event:MouseEvent):void {
				if (!alarmEnabled)
					return;
				rect07.color = uint("0xD3D3D3");
				rect08.color = uint("0xD3D3D3");
				setResetColorTimer();
				snoozefromnotification = ! snoozefromnotification
				labelsnoozefromnotification.text = snoozefromnotification ? ModelLocator.resourceManagerInstance.getString('general','yes') : ModelLocator.resourceManagerInstance.getString('general','no');
				alertTypeChanged = true;
			}
			
			protected function defaultsnoozeperiod_clickHandler(event:MouseEvent):void {
				if (!alarmEnabled)
					return;
				rect09.color = uint("0xD3D3D3");
				rect10.color = uint("0xD3D3D3");
				setResetColorTimer();
				var alert:DialogView = Dialog.service.create(
					new AlertBuilder()
					.setTitle(ModelLocator.resourceManagerInstance.getString("alerttypeview","default_snooze"))
					.setMessage(ModelLocator.resourceManagerInstance.getString("alerttypeview","default_snooze_text"))
					.addTextField((new Number(defaultSnoozePeriodInMinutes)).toString(),"", false, 4)
					.addOption("Ok", DialogAction.STYLE_POSITIVE, 0)
					.addOption(ModelLocator.resourceManagerInstance.getString("general","cancel"), DialogAction.STYLE_CANCEL, 1)
					.build()
				);
				DialogService.addDialog(alert);
				alert.addEventListener(DialogViewEvent.CLOSED, snoozeperiodentered);
				
				function snoozeperiodentered(event:DialogViewEvent):void {
					if (event.index == 1) {
						return;
					}
					if (event.values.length < 1)
						return;
					
					var asNumber:Number = new Number(event.values[0] as String);
					defaultSnoozePeriodInMinutes = (new Number(asNumber));
					if (defaultSnoozePeriodInMinutes == alertType.defaultSnoozePeriodInMinutes) {
						alertTypeChanged = true;
					}
				}
			}
			
			protected function sound_clickHandler(event:MouseEvent):void {
				if (!alarmEnabled)
					return;
				rect11.color = uint("0xD3D3D3");
				rect12.color = uint("0xD3D3D3");
				setResetColorTimer();

				var soundsAsStoredInAssets:String = ModelLocator.resourceManagerInstance.getString("alerttypeview","sound_names_as_in_assets_no_translation_needed_comma_seperated");
				var soundsAsStoredInAssetsSplitted:Array = soundsAsStoredInAssets.split(',');

				var selectedSound:int = 0;
				var soundNames:Array = new Array();
				var soundsAsDisplayed:String = ModelLocator.resourceManagerInstance.getString("alerttypeview","sound_names_as_displayed_can_be_translated_must_match_above_list");
				var soundsAsDisplayedSplitted:Array = soundsAsDisplayed.split(',');
				soundNames.push(ModelLocator.resourceManagerInstance.getString("alerttypeview","no_sound"));
				for (var cntr:int = 0;cntr < soundsAsDisplayedSplitted.length;cntr++) {
					var newSound:String = soundsAsDisplayedSplitted[cntr];
					if (newSound.length > 0) {
						soundNames.push(newSound);
						if (newSound.toUpperCase() == soundName.toUpperCase())
							selectedSound = cntr + 1;
					}
				}

				var picker:PickerDialogView = Dialog.service.create(
					new PickerDialogBuilder()
					.setTitle(ModelLocator.resourceManagerInstance.getString('fromtimeandvalueelementview', 'alarm_picker_title'))
					.setCancelLabel(ModelLocator.resourceManagerInstance.getString("general","cancel"))
					.setAcceptLabel("Ok")
					.addColumn(soundNames, selectedSound)
					.build()
				);
				
				picker.addEventListener( DialogViewEvent.CLOSED, picker_closedHandler );
				picker.addEventListener(DialogViewEvent.CHANGED, picker_changedHandler);
				picker.addEventListener(DialogViewEvent.CANCELLED, picker_canceledHandler);
				picker.show();
				
				function picker_canceledHandler(event:DialogViewEvent):void {
					BackgroundFetch.stopPlayingSound();
				}
				
				function picker_changedHandler(event:DialogViewEvent):void {
					BackgroundFetch.stopPlayingSound();

					var newSoundName:String = event.values[0];
					var soundInList:String;
					if (newSoundName == ModelLocator.resourceManagerInstance.getString("alerttypeview","no_sound")) {
					} else {
						for (var cntr:int = 0;cntr < soundsAsDisplayedSplitted.length;cntr++) {
							soundInList = soundsAsDisplayedSplitted[cntr];
							if (soundInList == newSoundName) {
								BackgroundFetch.playSound(soundsAsStoredInAssetsSplitted[cntr]);
								break;
							}
						}
					}
				}
				
				function picker_closedHandler(event:DialogViewEvent): void {
					BackgroundFetch.stopPlayingSound();
					var newSoundName:String = event.values[0];
					if (soundName == newSoundName)
						return;
					
					soundName = StringUtil.trim(newSoundName);//using trim because during tests sometimes the soundname had a preceding white space
					alertTypeChanged = true;					
				}
			}
			
			private function setResetColorTimer():void {
				if (resetColorTimer != null)
					if (resetColorTimer.running) {
						resetColorTimer.stop();					
					}
				
				resetColorTimer = new Timer(100, 1);
				resetColorTimer.addEventListener(TimerEvent.TIMER, resetColor);
				resetColorTimer.start();
				
				function resetColor(event:Event):void {
					rect01.color = uint("0x212121");//enabled or disabled
					rect02.color = uint("0x212121");
					rect03.color = uint("0x212121");//alarmname
					rect04.color = uint("0x212121");
					rect05.color = uint("0x212121");//alarmname
					rect06.color = uint("0x212121");
					rect07.color = uint("0x212121");//snoozefromnotification
					rect08.color = uint("0x212121");
					rect09.color = uint("0x212121");//defaultsnoozeperiod
					rect10.color = uint("0x212121");
					rect11.color = uint("0x212121");//sound
					rect12.color = uint("0x212121");
					rect13.color = uint("0x212121");//sound
					rect14.color = uint("0x212121");
				}
			}
			
			protected function back_clickHandler(event:MouseEvent):void {
				if (alertTypeChanged) {
					var alert:DialogView = Dialog.service.create(
						new AlertBuilder()
						.setTitle(ModelLocator.resourceManagerInstance.getString('fromtimeandvaluelistview',"savechanges"))
						.setMessage(ModelLocator.resourceManagerInstance.getString('fromtimeandvaluelistview',"chose_yes_or_no"))
						.addOption(ModelLocator.resourceManagerInstance.getString("general","yes"), DialogAction.STYLE_POSITIVE, 0)
						.addOption(ModelLocator.resourceManagerInstance.getString("general","no"), DialogAction.STYLE_CANCEL, 1)
						.build()
					);
					alert.addEventListener(DialogViewEvent.CLOSED, onYesClicked);
					DialogService.addDialog(alert);
				} else 
					navigator.popView();
			}
			
			private function onYesClicked(event:DialogViewEvent): void
			{
				if (event.index == 1) {
					navigator.popView();
				} else if (event.index == 0) {
					okClicked();
				}
			}
			
			private function okClicked(e:MouseEvent = null):void {
				var alertTypeInDatabase:AlertType = Database.getAlertType(alertType.alarmName);
				var neworExistingAlertType:AlertType; 
				if (soundName == ModelLocator.resourceManagerInstance.getString("alerttypeview","no_sound"))
					soundName = "no_sound";
				if (alertTypeInDatabase != null) {
					neworExistingAlertType = new AlertType(
						alertTypeInDatabase.uniqueId, 
						Number.NaN, 
						alarmName, 
						false, 
						vibrationenabled, 
						snoozefromnotification, 
						alarmEnabled, 
						false, 
						soundName,
						defaultSnoozePeriodInMinutes,
						repeatInMinutes);
					Database.updateAlertTypeSynchronous(neworExistingAlertType);
				} else {
					neworExistingAlertType = new AlertType(
						null, 
						Number.NaN, 
						alarmName, 
						false, 
						vibrationenabled, 
						snoozefromnotification, 
						alarmEnabled, 
						false, 
						soundName,
						defaultSnoozePeriodInMinutes,
						repeatInMinutes);
					Database.insertAlertTypeSychronous(neworExistingAlertType);
				}
				if (previousAlertTypeName != "") {
					if (previousAlertTypeName != alarmName) {
						AlertType.alertTypeUsed(previousAlertTypeName, alarmName);
						previousAlertTypeName  = "";
					}
				}

				navigator.popView();
			}
		]]>
	</fx:Script>
	
	<s:navigationContent>
		<s:Button   label="{back_label}" click="back_clickHandler(event)" height="48"/>
	</s:navigationContent>
	<s:actionContent>
		<s:Button icon="{ModelLocator.imageDone}" id="OkButton" click="okClicked(event)"/>
	</s:actionContent>
	
	<s:Scroller width="100%" height="100%" >
		<s:VGroup width="100%" paddingTop="10">
			<s:Label text="@{topText}"  textAlign="center"  color="#3B6999" 
					 width="100%" paddingLeft="3" paddingRight="0" fontSize="20" fontWeight="bold" paddingTop="3"/>
			<s:Line width="100%">
				<s:stroke>
					<s:SolidColorStroke color="#3B6999"  weight="3"/>
				</s:stroke>
			</s:Line>
			
			<!-- enabled or disabled -->
			<s:VGroup click="enabled_clickHandler(event)" width="100%">
				<s:HGroup width="100%">
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect01"/>
						</s:fill>
					</s:Rect>
					<s:Label id="labelenabledornot"
							 width="100%" paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect02"/>
						</s:fill>
					</s:Rect>
				</s:HGroup>
				<s:Line width="100%">
					<s:stroke>
						<s:SolidColorStroke color="0xFFFFFF" weight="1" alpha="0.25"/>
					</s:stroke>
				</s:Line>	
			</s:VGroup>
			
			
			<s:VGroup width="100%" >
				<!-- alarmname -->
				<s:HGroup id="alarmnamegroup" click="alarmName_clickHandler(event)" width="100%">
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect03"/>
						</s:fill>
					</s:Rect>
					<s:Label text="{ModelLocator.resourceManagerInstance.getString('alerttypeview','alarmname')}"
							 width="100%" paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Label text = "@{alarmName}"  
							 paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect04"/>
						</s:fill>
					</s:Rect>
				</s:HGroup>
				<s:Line width="100%">
					<s:stroke>
						<s:SolidColorStroke color="0xFFFFFF" weight="1" alpha="0.25"/>
					</s:stroke>
				</s:Line>	
				
				<!-- enablevibration -->
				<s:HGroup id="enablevibrationgroup" click="enablevibration_clickHandler(event)" width="100%">
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect05"/>
						</s:fill>
					</s:Rect>
					<s:Label text = "{ModelLocator.resourceManagerInstance.getString('alerttypeview','vibrationenabled')}"
							 width="100%" paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Label id="labelvibrationenabled"  
							 paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect06"/>
						</s:fill>
					</s:Rect>
				</s:HGroup>
				<s:Line width="100%">
					<s:stroke>
						<s:SolidColorStroke color="0xFFFFFF" weight="1" alpha="0.25"/>
					</s:stroke>
				</s:Line>	
				
				<!-- snoozefromnotification -->
				<s:HGroup id="snoozefromnotificationgroup" click="snoozefromnotification_clickHandler(event)" width="100%">
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect07"/>
						</s:fill>
					</s:Rect>
					<s:Label text = "{ModelLocator.resourceManagerInstance.getString('alerttypeview','snoozefromnotification')}"
							 width="100%" paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Label id="labelsnoozefromnotification"  
							 paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect08"/>
						</s:fill>
					</s:Rect>
				</s:HGroup>
				<s:Line width="100%">
					<s:stroke>
						<s:SolidColorStroke color="0xFFFFFF" weight="1" alpha="0.25"/>
					</s:stroke>
				</s:Line>	
				
				<!-- defaultsnoozeperiod -->
				<s:HGroup id="defaultsnoozeperiodgroup" click="defaultsnoozeperiod_clickHandler(event)" width="100%">
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect09"/>
						</s:fill>
					</s:Rect>
					<s:Label text = "{ModelLocator.resourceManagerInstance.getString('alerttypeview','defaultsnoozeperiod')}"
							 width="100%" paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Label text = "{defaultSnoozePeriodInMinutes}"  
							 paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect10"/>
						</s:fill>
					</s:Rect>
				</s:HGroup>
				<s:Line width="100%">
					<s:stroke>
						<s:SolidColorStroke color="0xFFFFFF" weight="1" alpha="0.25"/>
					</s:stroke>
				</s:Line>	
				
				<!-- repeatinminutes -->
				<s:HGroup id="repeatinminutesgroup" click="repeatinminutes_clickHandler(event)" width="100%">
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect13"/>
						</s:fill>
					</s:Rect>
					<s:Label text = "{ModelLocator.resourceManagerInstance.getString('alerttypeview','repeat')}"
							 width="100%" paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Label id="labelrepeatinminutes"  
							 paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect14"/>
						</s:fill>
					</s:Rect>
				</s:HGroup>
				<s:Line width="100%">
					<s:stroke>
						<s:SolidColorStroke color="0xFFFFFF" weight="1" alpha="0.25"/>
					</s:stroke>
				</s:Line>	
				
				<!-- sound -->
				<s:HGroup id="soundgroup" click="sound_clickHandler(event)" width="100%">
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect11"/>
						</s:fill>
					</s:Rect>
					<s:Label text="{ModelLocator.resourceManagerInstance.getString('alerttypeview','soundname')}"
							 width="100%" paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Label text = "@{soundName}"  
							 paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>
					<s:Rect height="100%" width="5" >
						<s:fill>
							<s:SolidColor color="#212121" id="rect12"/>
						</s:fill>
					</s:Rect>
				</s:HGroup>
				<s:Line width="100%">
					<s:stroke>
						<s:SolidColorStroke color="0xFFFFFF" weight="1" alpha="0.25"/>
					</s:stroke>
				</s:Line>	
			</s:VGroup>
		</s:VGroup>
	</s:Scroller>
</s:View>
