<?xml version="1.0" encoding="utf-8"?>
<!--
Copyright (C) 2017  Johan Degraeve

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/gpl.txt>.

-->
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		creationComplete="view1_creationCompleteHandler(event)"
		xmlns:s="library://ns.adobe.com/flex/spark" title="">
	<fx:Metadata>
		[ResourceBundle("alerttypesview")]
		[ResourceBundle("alerttypeview")]
	</fx:Metadata>

	<fx:Script>
		<![CDATA[
			import com.distriqt.extension.dialog.Dialog;
			import com.distriqt.extension.dialog.DialogView;
			import com.distriqt.extension.dialog.builders.AlertBuilder;
			import com.distriqt.extension.dialog.objects.DialogAction;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			
			import spark.events.IndexChangeEvent;
			
			import Utilities.FromtimeAndValue;
			import Utilities.FromtimeAndValueArrayCollection;
			
			import databaseclasses.AlertType;
			import databaseclasses.CommonSettings;
			import databaseclasses.Database;
			
			import model.ModelLocator;
			
			import renderers.AlertTypeItemRenderer;
			
			import services.DialogService;
			
			private var _listOfElements:ArrayCollection;
			private var deleteClicked:Boolean;
			private var editClicked:Boolean;
			
			[Bindable]
			private var back_label:String;
			
			[Bindable]
			/**
			 * topText shown on top of the view.
			 */
			private var topText:String;
			
			[Bindable]
			/**
			 * list of elements, should be list of FromtimeAndValue objects
			 */
			public function get listOfElements():ArrayCollection
			{
				return _listOfElements;
			}
			
			/**
			 * @private
			 */
			public function set listOfElements(value:ArrayCollection):void
			{
				_listOfElements = value;
			}
			
			protected function view1_creationCompleteHandler(event:FlexEvent):void
			{
				//ModelLocator.navigator = navigator;
				back_label = ModelLocator.resourceManagerInstance.getString('general','back');
				listOfElements =  Database.getAllAlertTypes();
				topText = ModelLocator.resourceManagerInstance.getString('settingsview','alert_types_list_top_text');
				list.addEventListener(AlertTypeItemRenderer.DELETE_CLICKED,deleteTheSelectedItem);
				list.addEventListener(AlertTypeItemRenderer.EDIT_CLICKED,editTheSelectedItem);
			}
			
			private function deleteTheSelectedItem(event:Event):void {
				deleteClicked = true;
				if (event.currentTarget.selectedIndices.length > 0) {
					var indexChangeEvent:IndexChangeEvent = new IndexChangeEvent("",false,false,-1,event.currentTarget.selectedIndices[0]);
					list_changeHandler(indexChangeEvent);
				}
			}
			
			private function editTheSelectedItem(event:Event):void {
				editClicked = true;
				if (event.currentTarget.selectedIndices.length > 0) {
					var indexChangeEvent:IndexChangeEvent = new IndexChangeEvent("",false,false,-1,event.currentTarget.selectedIndices[0]);
					list_changeHandler(indexChangeEvent);
				}
			}
			
			protected function back_clickHandler(event:MouseEvent):void {
				navigator.popView();
			}
			
			protected function list_changeHandler(event:IndexChangeEvent):void {
				if (deleteClicked) {
					deleteClicked = false;
					var alarmNameOfItemToDelete:String = (listOfElements.getItemAt(event.newIndex) as AlertType).alarmName;
					if (AlertType.alertTypeUsed(alarmNameOfItemToDelete)) {
						DialogService.openSimpleDialog(ModelLocator.resourceManagerInstance.getString("alerttypesview","delete_alert_type"),
							ModelLocator.resourceManagerInstance.getString("alerttypesview","alerttype_still_used"));
						return;
					}
					Database.deleteAlertTypeSynchronous(listOfElements.getItemAt(event.newIndex) as AlertType);
					listOfElements.removeItemAt(event.newIndex);
				} else if (editClicked) {
					editClicked = false;
					var dataToSend:Object = new Object;
					dataToSend.alertType = listOfElements.getItemAt(event.newIndex) as AlertType;
					navigator.pushView(AlertTypeView, dataToSend);
				}
			}
			
			private function addClicked(e:MouseEvent = null):void {
				var dataToSend:Object = new Object;
				var defaultAlarmName:String = ModelLocator.resourceManagerInstance.getString("alerttypesview","default_alarm_name");
				var existingAlertTypes:ArrayCollection = Database.getAllAlertTypes();
				var nameOk:Boolean = false;
				var namecntr:int = 0;
				while (!nameOk) {
					namecntr++;
					var newName:String = defaultAlarmName + "_" + namecntr;
					var cntr:int;
					for (cntr = 0; cntr < existingAlertTypes.length; cntr++) {
						if (((existingAlertTypes.getItemAt(cntr)) as AlertType).alarmName.toUpperCase() == newName.toUpperCase()) {
							break;
						}
					}
					if (cntr == existingAlertTypes.length) {
						nameOk = true;
					}
				}
				defaultAlarmName += "_" + namecntr;
				var soundsAsDisplayed:String = ModelLocator.resourceManagerInstance.getString("alerttypeview","sound_names_as_displayed_can_be_translated_must_match_above_list");
				var soundsAsDisplayedSplitted:Array = soundsAsDisplayed.split(',');
				var defaultSoundName:String = soundsAsDisplayedSplitted[0];
				var newAlertType:AlertType = new AlertType(null, Number.NaN, defaultAlarmName, false, false, false, false, false, defaultSoundName, 5, 0);
				dataToSend.alertType = newAlertType;
				navigator.pushView(AlertTypeView, dataToSend);
			}

		]]>
	</fx:Script>
	
	<s:navigationContent>
		<s:Button   label="{back_label}" click="back_clickHandler(event)" height="48"/>
	</s:navigationContent>
	<s:actionContent>
		<s:Button icon="{ModelLocator.image_add}" id="AddButton" click="addClicked(event)"/>
	</s:actionContent>
	
	<s:Scroller width="100%" height="100%" >
		<s:VGroup width="100%" paddingTop="10">
			<s:Label text="@{topText}"  textAlign="center"  color="#3B6999" 
					 width="100%" paddingLeft="3" paddingRight="0" fontSize="20" fontWeight="bold" paddingTop="3"/>
			<s:Line width="100%">
				<s:stroke>
					<s:SolidColorStroke color="#3B6999"  weight="3"/>
				</s:stroke>
			</s:Line>
			<s:List id="list" width="100%" height="100%" itemRenderer="renderers.AlertTypeItemRenderer"
					dataProvider="{listOfElements}" 
					change="list_changeHandler(event)"
					scrollSnappingMode="leadingEdge">
			</s:List>
		</s:VGroup>
	</s:Scroller>
</s:View>
