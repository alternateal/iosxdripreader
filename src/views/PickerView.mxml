<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		creationComplete="view1_creationCompleteHandler(event)"
		
		xmlns:s="library://ns.adobe.com/flex/spark">
	<fx:Script>
		<![CDATA[
			import com.distriqt.extension.dialog.DialogView;
			import com.distriqt.extension.dialog.events.DialogViewEvent;
			
			import mx.events.FlexEvent;
			
			import spark.transitions.FlipViewTransition;
			
			import Utilities.Trace;
			
			import model.ModelLocator;
			
			[ResourceBundle('pickerview')]
			
			[Bindable]
			private var pickertext:String = "";
			private var pickerCloseTimer:Timer;
			private var picker:DialogView;
			private var flipTrans:FlipViewTransition; 
			
			protected function view1_creationCompleteHandler(event:FlexEvent):void
			{
				flipTrans = new FlipViewTransition(); 
				flipTrans.duration = 0;
				
				myTrace("in view1_creationCompleteHandler");
				actionBarVisible = false;
				tabBarVisible = false;
				if (data.picker) {
					myTrace("in view1_creationCompleteHandler, data.picker exists, opening picker");
					picker = data.picker as DialogView;
					pickertext = data.pickertext + "\n\n" + ModelLocator.resourceManagerInstance.getString("pickerview","click_to_close");
					picker.addEventListener(DialogViewEvent.CLOSED, snoozePicker_closedHandler);
					picker.addEventListener(DialogViewEvent.CANCELLED, snoozePicker_closedHandler);
					picker.show();
				} else {
					myTrace("in view1_creationCompleteHandler, data.picker does not exist not opening picker");
					
				}
				
				//keep the picker open for  maximum 4 minutes, otherwise if alert goes off again, it would add an additional pickerview
				pickerCloseTimer = new Timer( 4 * 60 * 1000, 1);
				pickerCloseTimer.addEventListener(TimerEvent.TIMER, closePicker);
				pickerCloseTimer.start();
				
			}
			
			private function closePicker(event:Event = null):void {
				myTrace("in closePicker");
				picker.dispose();
				if (navigator != null)
					navigator.popView(flipTrans);
			}
			
			private function snoozePicker_closedHandler(event:DialogViewEvent): void {
				myTrace("in snoozePicker_closedHandler");
				if (pickerCloseTimer != null)
					if (pickerCloseTimer.running)
						pickerCloseTimer.stop();
				if (navigator != null)
					navigator.popView(flipTrans);
			}
			
			private static function myTrace(log:String):void {
				Trace.myTrace("PickerView.mxml", log);
			}
			
			protected function vgroup1_clickHandler(event:MouseEvent):void
			{
				if (picker != null)
					picker.dispose();
				if (navigator != null)
					navigator.popView(flipTrans);
			}
			
		]]>
	</fx:Script>
	
	<s:VGroup width="100%"  paddingTop="50" click="vgroup1_clickHandler(event)">
		<s:HGroup width="100%" verticalAlign="bottom">
			<s:Rect height="100%" width="5" >
				<s:fill>
					<s:SolidColor color="#212121"/>
				</s:fill>
			</s:Rect>
			<s:Label text="@{pickertext}"  textAlign="center"
					 width="100%" paddingLeft="0" paddingRight="0" fontSize="20" paddingTop="3"/>
			<s:Rect height="100%" width="5" >
				<s:fill>
					<s:SolidColor color="#212121"/>
				</s:fill>
			</s:Rect>
		</s:HGroup>
	</s:VGroup>
</s:View>
